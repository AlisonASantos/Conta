// <auto-generated />
using System;
using Conta.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Conta.Infrastructure.Migrations
{
    [DbContext(typeof(MeuDbContext))]
    [Migration("20200715100012_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Conta.Domain.Entidades.ContaCorrente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NumeroConta")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<double>("SaldoConta")
                        .HasColumnType("float");

                    b.Property<string>("TitularConta")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ContaCorrentes");
                });

            modelBuilder.Entity("Conta.Domain.Models.LancamentosPorConta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContaCorrenteId")
                        .HasColumnType("int");

                    b.Property<int>("TipoLancamento")
                        .HasColumnType("int");

                    b.Property<double>("ValorOperacao")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ContaCorrenteId");

                    b.ToTable("LancamentosPorConta");
                });

            modelBuilder.Entity("Conta.Domain.ObjetoDeValor.Lancamentos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ContaCorrenteId")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(400);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(40);

                    b.HasKey("Id");

                    b.HasIndex("ContaCorrenteId");

                    b.ToTable("Lancamentos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descricao = "Débito em conta",
                            Nome = "Débito"
                        },
                        new
                        {
                            Id = 2,
                            Descricao = "Crédito em conta",
                            Nome = "Crédito"
                        });
                });

            modelBuilder.Entity("Conta.Domain.Models.LancamentosPorConta", b =>
                {
                    b.HasOne("Conta.Domain.Entidades.ContaCorrente", "ContaCorrente")
                        .WithMany("LancamentosPorContas")
                        .HasForeignKey("ContaCorrenteId")
                        .IsRequired();
                });

            modelBuilder.Entity("Conta.Domain.ObjetoDeValor.Lancamentos", b =>
                {
                    b.HasOne("Conta.Domain.Entidades.ContaCorrente", "ContaCorrente")
                        .WithMany()
                        .HasForeignKey("ContaCorrenteId");
                });
#pragma warning restore 612, 618
        }
    }
}
